{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Homie API Documentation",
        "description": "Our Homie Project Application API",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "contact": {
            "name": "Homie Website",
            "url": "https://homie-iti.vercel.app/",
            "email": "best.clinic.in.the.world@gmail.com"
        },
        "servers": [
            {
                "url": "https://localhost:8080",
                "description": "Local server"
            },
            {
                "url": "http://homie-iti.herokuapp.com/",
                "description": "Development server"
            }
        ],
        "schemes": [
            "http"
        ],
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ]
    },
    "tags": [
        {
            "name": "Units",
            "description": "API for units in the system"
        },
        {
            "name": "Cities",
            "description": "API for cities in the system"
        },
        {
            "name": "Users",
            "description": "API for users in the system"
        },
        {
            "name": "Agents",
            "description": "API for agents in the system"
        },
        {
            "name": "Admins",
            "description": "API for admins in the system"
        },
        {
            "name": "Landlords",
            "description": "API for landlords in the system"
        },
        {
            "name": "Help Questions",
            "description": "API for help questions in the system"
        },
        {
            "name": "Reviews",
            "description": "API for reviews in the system"
        }
    ],
    "paths": {
        "/units": {
            "get": {
                "tags": [
                    "Units"
                ],
                "summary": "Get array of unit objects containing units that exist on the given page with limit 30 unit",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number that we want to display units exist on it"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success,",
                        "schema": {
                            "type": "array",
                            "$ref": "#/definitions/Unit"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Units"
                ],
                "summary": "Adding new unit",
                "parameters": [
                    {
                        "name": "unit",
                        "in": "body",
                        "description": "Unit data that we want to add",
                        "schema": {
                            "$ref": "#/definitions/Unit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New unit is added",
                        "schema": {
                            "$ref": "#/definitions/Unit"
                        }
                    }
                }
            }
        },
        "/units/{id}": {
            "get": {
                "tags": [
                    "Units"
                ],
                "summary": "Get unit data that matches the given id.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of unit that we want to find",
                        "type": "objectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success,Specific unit data",
                        "schema": {
                            "$ref": "#/definitions/Unit"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Units"
                ],
                "summary": "Delete unit data that matches the given id.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of unit that we want to delete",
                        "type": "objectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success,Unit deleted successfully"
                    }
                }
            }
        },
        "/cities": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get an array of city objects containing all cities that exist in the database.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Cities"
                ],
                "summary": "Adding new city to cities collection & return the id of added city",
                "parameters": [
                    {
                        "name": "city",
                        "in": "body",
                        "description": "City data that we want to add",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New city is added",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    }
                }
            }
        },
        "/cities/{id}": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get city data that match the given id.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city that we want to find",
                        "type": "objectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/getCityById"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Cities"
                ],
                "summary": "Update specific city data by given its id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the city ",
                        "type": "objectId"
                    },
                    {
                        "name": "new properties to update",
                        "in": "body",
                        "description": "City data that we want to update",
                        "schema": {
                            "$ref": "#/definitions/updateCity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " Given property of City with given id has been updated"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cities"
                ],
                "summary": "Delete city data that matches the given id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "cityId that we want to delete",
                        "schema": {
                            "type": "objectId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted city"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/cities/{id}/units": {
            "post": {
                "tags": [
                    "Cities"
                ],
                "summary": "Adding a unit or more than a unit to a specific city with a given id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city that we want to add new unit to it",
                        "type": "objectId"
                    },
                    {
                        "name": "units",
                        "in": "body",
                        "description": "units that we want to add to the city.",
                        "schema": {
                            "$ref": "#/definitions/addingUnitToCity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "unit is added to city"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cities"
                ],
                "summary": "Deleting a unit or more than a unit from a specific city with a given id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city that we want to delete unit from it",
                        "type": "objectId"
                    },
                    {
                        "name": "units",
                        "in": "body",
                        "description": "units that we want to delete from the city.",
                        "schema": {
                            "$ref": "#/definitions/addingUnitToCity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "units are deleted from city"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/cities/{id}/{prop}": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get specific city property",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city that we want to get its specific property",
                        "type": "objectId"
                    },
                    {
                        "name": "prop",
                        "in": "path",
                        "description": "Property that we wants to get specific city by it.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "description": "[units ids exist in the city]"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get array of users objects containing users that exist on the given page with limit 30 unit",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number that we want to display users exist on it"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Adding a new user to users' collection & returning the data of the added user",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User data that we want to add",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New user has been added",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update specific user data",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User data that we want to update",
                        "schema": {
                            "$ref": "#/definitions/UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "updated"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete one or more than one user data that matches the given array",
                "parameters": [
                    {
                        "name": "userIds",
                        "in": "body",
                        "description": "userIds that we want to delete",
                        "schema": {
                            "$ref": "#/definitions/deleteMany"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City with given id has been deleted"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user data that match the given id.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user that we want to find",
                        "type": "objectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/landlords": {
            "get": {
                "tags": [
                    "Landlords"
                ],
                "summary": "Get array of landlords objects containing landlords that exist on the given page with limit 30 landlords",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number that we want to display landlords exist on it"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of landlords",
                        "schema": {
                            "$ref": "#/definitions/Landlord"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Landlords"
                ],
                "summary": "Adding a new landlord exists in users' collection to landlords' collection then update the value of isLandlord to true in users' collection",
                "parameters": [
                    {
                        "name": "landlord",
                        "in": "body",
                        "description": "Landlord data that we want to add(_id present in users & landlordUnits array to add)",
                        "schema": {
                            "$ref": "#/definitions/AddingNewLandlord"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The id of landlord added"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Landlords"
                ],
                "summary": "Update landlord units",
                "parameters": [
                    {
                        "name": "landlordId needs to be updated, and landlordUnits needs to be added.",
                        "in": "body",
                        "description": "Landlord units that we want to add one or array",
                        "schema": {
                            "$ref": "#/definitions/LandlordUnits"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "landlord after adding new unit"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/landlords/{id}": {
            "get": {
                "tags": [
                    "Landlords"
                ],
                "summary": "Get specific landlord data",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of landlord that we want to get its data"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data of landlord"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Landlords"
                ],
                "summary": "Delete landlord data that matches the given id and update users' collection for this id to be landlord false.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Landlord id that we want to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted landlord"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/landlords/{id}/units": {
            "delete": {
                "tags": [
                    "Landlords"
                ],
                "summary": "Delete specific landlord units",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of landlord that we want to delete unit from its units"
                    },
                    {
                        "name": "landlordUnits",
                        "in": "body",
                        "description": "landlord unit (one only) that we want to delete ",
                        "schema": {
                            "$ref": "#/definitions/LandlordUnits"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data describe deleting process"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admins": {
            "get": {
                "tags": [
                    "Admins"
                ],
                "summary": "Get array of admins objects containing admins that exist on the given page with limit 30 landlords",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number that we want to display admins exist on it"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of landlords",
                        "schema": {
                            "$ref": "#/definitions/Admin"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admins"
                ],
                "summary": "Adding a new admin",
                "parameters": [
                    {
                        "name": "Admin",
                        "in": "body",
                        "description": "Admin data that we want to add",
                        "schema": {
                            "$ref": "#/definitions/Admin"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The id of admin added"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Admins"
                ],
                "summary": "Update admin data",
                "parameters": [
                    {
                        "name": "id of admin we want to update its data and choose data we want to update",
                        "in": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/UpdateAdmin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "updated"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/admins/{id}": {
            "get": {
                "tags": [
                    "Admins"
                ],
                "summary": "Get specific admin data",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of admin that we want to get its data"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data of admin",
                        "schema": {
                            "$ref": "#/definitions/Admin"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admins"
                ],
                "summary": "Delete admin data that matches the given id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Admin id that we want to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/agents": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "summary": "Get array of agents objects containing agents that exist on the given page with limit 30 agents",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number that we want to display agents exist on it"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of agents"
                    }
                }
            },
            "post": {
                "tags": [
                    "Agents"
                ],
                "summary": "Adding a new agent exists in users' collection to agents' collection then update the value of isAgent to true in users' collection",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "body",
                        "description": "Agent data that we want to add(_id present in users & AgentUnits array of objects each object contains unitId &numberOfRenting )",
                        "schema": {
                            "$ref": "#/definitions/AddingNewAgent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "agent added"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/agents/{id}": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "summary": "Get specific agent data",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of agent that we want to get its data"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data of agent"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/agents/agentUnits": {
            "put": {
                "tags": [
                    "Agents"
                ],
                "summary": "Update specific agent units",
                "parameters": [
                    {
                        "name": "_id of agent,agentUnits",
                        "in": "body",
                        "description": "id of agent that we want to update its units",
                        "schema": {
                            "$ref": "#/definitions/AddingNewAgent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "agent data after updating"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/agents/agentUnits/{id}": {
            "delete": {
                "tags": [
                    "Agents"
                ],
                "summary": "Delete specific agent units",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of agent that we want to delete its units",
                        "schema": {
                            "$ref": "#/definitions/deleteAgentUnit"
                        }
                    },
                    {
                        "name": "id",
                        "in": "body",
                        "description": "id of agent that we want to update its units",
                        "schema": {
                            "$ref": "#/definitions/deleteAgentUnits"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "agent data after updating"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/myFavourite/{id}": {
            "get": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Get array of Favorite agent units objectsId ",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "agent id that we want to get its favorite units"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of agent favorite units and _id of agent"
                    }
                }
            },
            "put": {
                "tags": [
                    "Favorites"
                ],
                "summary": "",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "agent id that we want to get its favorite units"
                    },
                    {
                        "name": "agentFavoriteUnit",
                        "in": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/updateAgentFavoriteUnits"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "agent data"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/myFavourite/{id}/unit": {
            "delete": {
                "tags": [
                    "Favorites"
                ],
                "summary": "",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "agent id that we want to delete its favorite units"
                    },
                    {
                        "name": "agentFavoriteUnit",
                        "in": "body",
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/updateAgentFavoriteUnits"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "agent data"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/help-questions": {
            "get": {
                "tags": [
                    "Help Questions"
                ],
                "summary": "Get array of helpQuestions objects containing helpQuestions that exist on the given page with limit 30 unit",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number that we want to display helpQuestions exist on it"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HelpQuestion"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Help Questions"
                ],
                "summary": "Adding a new help-question to helpQuestions' collection & returning added",
                "parameters": [
                    {
                        "name": "help-question",
                        "in": "body",
                        "description": "Question data that we want to add",
                        "schema": {
                            "$ref": "#/definitions/HelpQuestion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New Help Question has been added",
                        "schema": {
                            "type": "added"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/helpQuestion/{id}": {
            "get": {
                "tags": [
                    "Help Questions"
                ],
                "summary": "Get help question data that match the given id.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of help question that we want to find",
                        "type": "objectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Help Question data",
                        "schema": {
                            "$ref": "#/definitions/HelpQuestion"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            },
            "put": {
                "tags": [
                    "Help Questions"
                ],
                "summary": "Update specific help question",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of help question that we want to update"
                    },
                    {
                        "name": "help-question",
                        "in": "body",
                        "description": "userId & adminId of the question and data desired to be be updated",
                        "schema": {
                            "$ref": "#/definitions/HelpQuestion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "updated"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Help Questions"
                ],
                "summary": "Delete help question data that match the given id.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of help question that we want to delete",
                        "type": "objectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "data specifies status of deletion operation"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            }
        },
        "/helpQuestion/many": {
            "delete": {
                "tags": [
                    "Help Questions"
                ],
                "summary": "Delete one or more than one help question data that match the given ids.",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "body",
                        "description": "Array of ids of help questions that we want to delete",
                        "schema": {
                            "$ref": "#/definitions/deleteMany"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get all reviews present in database",
                "responses": {
                    "200": {
                        "description": "Array of reviews data"
                    }
                }
            },
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Adding new review to specific agent unit",
                "parameters": [
                    {
                        "name": "review",
                        "in": "body",
                        "description": "unitId to add review,agentId that have this unit,comment,rating",
                        "schema": {
                            "$ref": "#/definitions/addingReview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "information about update process adding review to unit reviews"
                    }
                }
            }
        },
        "/reviews/{id}": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get specific review data",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the review that we want to display"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "review data"
                    }
                }
            }
        },
        "/units/reviews/{id}": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Getting specific unit reviews with total number of them and rating average",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "unitId that we want to get it reviews"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "average ratings of unit,number of reviews and reviews body"
                    }
                }
            }
        },
        "/units/{unitId}/reviews/{reviewId}": {
            "delete": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Delete specific unit review",
                "parameters": [
                    {
                        "name": "unitId",
                        "in": "path",
                        "description": "unitId that we want to delete its review"
                    },
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "reviewId that we want to delete from unit reviews "
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review deleted from unit reviews and reviews collection successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            }
        },
        "/contracts/unit/{id}": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Getting specific unit contracts",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "unitId that we want to get its contracts"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of contracts of specific unit"
                    }
                }
            }
        },
        "/contracts/landlord/{id}": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Getting specific landlord contracts",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "landlordId that we want to get its contracts"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of contracts of specific landlord"
                    }
                }
            }
        },
        "/contracts/{contractId}/unit/{id}": {
            "delete": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Delete specific unit contract",
                "parameters": [
                    {
                        "name": "contractId",
                        "in": "path",
                        "description": "contractId that we want to delete its contracts"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "unitId that we want to delete its contracts"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "information about delete process"
                    }
                }
            }
        },
        "/contracts": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Get array of contracts objects containing contracts that exist on the given page with limit 30 unit",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number that we want to display contracts exist on it"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Contract"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Adding new contract to specific unit and specific agent & landlord",
                "parameters": [
                    {
                        "name": "contract",
                        "in": "body",
                        "description": "unitId to add review,agentId that have this unit,comment,rating",
                        "schema": {
                            "$ref": "#/definitions/Contract"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "added, and id of added contract"
                    }
                }
            }
        },
        "/contracts/{id}": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Get specific contract data",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the contract that we want to display"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "contract data"
                    }
                }
            }
        },
        "/book-unit/{id}": {
            "post": {
                "tags": [
                    "Payment"
                ],
                "summary": "Agent wants to book specific unit,so we make him fill contract data then send email to landlord to confirm or cancel booking",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unit id that agent wants to book"
                    },
                    {
                        "name": "id/rentalStart/rentalEnd/paymentMethod/state/days",
                        "in": "body",
                        "description": "id of agent &contract data and number of days that agent wants to book the unit",
                        "schema": {
                            "$ref": "#/definitions/bookingUnit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An email has been sent successfully to the landlord to confirm the booking."
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            }
        },
        "/confirm-booking/{id}": {
            "put": {
                "tags": [
                    "Payment"
                ],
                "summary": "When the landlord confirms the booking of the unit, the contract state changes to active, the unit data(isAvailable:false)and set agentId property, then add the totalAmount in the contract to the landlord balance and subtract it from the agent balance, and set the unit in agent units.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the contract that has been send to landlord"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An email has been sent to the agent to notify him that the landlord has been confirmed to book the unit."
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            }
        },
        "/cancel-booking/{id}": {
            "put": {
                "tags": [
                    "Payment"
                ],
                "summary": "When the landlord cancels the booking of the unit,we set the contract state to cancelled and send an email to the agent to notify them that the landlord has cancelled the booking of the unit.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the contract that has been send to landlord"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An email has been sent to the agent to notify that the contract has been canceled."
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": " Unprocessable Entity"
                    }
                }
            }
        },
        "/recommendations": {
            "get": {
                "tags": [
                    "Recommendations"
                ],
                "summary": "Get number of cities data that matches the entered number.",
                "parameters": [
                    {
                        "name": "citiesNumber",
                        "in": "query",
                        "description": "Number of cities we want to display"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "_id,name,cover of cities selected"
                    }
                }
            }
        },
        "/search": {
            "get": {
                "tags": [
                    "Search Cities"
                ],
                "summary": "Get cities that matches the entered string.",
                "parameters": [
                    {
                        "name": "cityname",
                        "in": "query",
                        "description": "Letter or letters of city that we search about"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    }
                }
            }
        },
        "/signup/check-availability": {
            "post": {
                "tags": [
                    "Sign Up"
                ],
                "summary": "Check availability of user data",
                "parameters": [
                    {
                        "name": "User Data",
                        "in": "body",
                        "description": "One field to check its availability",
                        "schema": {
                            "$ref": "#/definitions/UserDataAvailability"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "True or false according to availability"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "tags": [
                    "Sign Up"
                ],
                "summary": "Users sign up",
                "parameters": [
                    {
                        "name": "User Data",
                        "in": "body",
                        "description": "User Data to use in sign up",
                        "schema": {
                            "$ref": "#/definitions/UserSignUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data used to sign up"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Login"
                ],
                "summary": "Login of the user",
                "parameters": [
                    {
                        "name": "User data to login",
                        "in": "body",
                        "description": "To login, enter the user's email address and password",
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message confirm login and token created while logging in"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/login/admin": {
            "post": {
                "tags": [
                    "Login"
                ],
                "summary": "Login of the admin",
                "parameters": [
                    {
                        "name": "Admin Data",
                        "in": "body",
                        "description": "To login, enter the user's email address and password",
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message confirm login and token created while logging in"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/forgetPassword": {
            "put": {
                "tags": [
                    "Forget & Reset Password"
                ],
                "summary": "Forget Password Feature",
                "parameters": [
                    {
                        "name": "User Email that wants to reset its password",
                        "in": "body",
                        "description": "User email used to sign up",
                        "schema": {
                            "type": "email"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email with link will be sent to the given email if its registered "
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/resetPassword": {
            "put": {
                "tags": [
                    "Forget & Reset Password"
                ],
                "summary": "Resetting Password after clicking the reset link",
                "parameters": [
                    {
                        "name": "New Password",
                        "in": "body",
                        "description": "new password to enable login again"
                    },
                    {
                        "name": "Reset Link",
                        "in": "body",
                        "description": "reset link to enable changing password"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Your password has been changed, and an email has been sent to confirm the change. "
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "type": "Expired link or user doesn't found"
                    }
                }
            }
        }
    },
    "definitions": {
        "Unit": {
            "required": [
                "landlordId",
                "cityId",
                "estateType",
                "dailyPrice",
                "cover",
                "numberOfResidents",
                "unitInfo",
                "allowedGender",
                "unitInfo",
                "address",
                "isAvailable"
            ],
            "properties": {
                "landlordId": {
                    "type": "objectId"
                },
                "cityId": {
                    "type": "objectId"
                },
                "unitInfo": {
                    "type": "object",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "rooms": {
                            "type": "number"
                        },
                        "bathrooms": {
                            "type": "number"
                        },
                        "floor": {
                            "type": "number"
                        }
                    }
                },
                "address": {
                    "type": "object",
                    "properties": {
                        "city": {
                            "type": "string"
                        },
                        "streetName": {
                            "type": "number"
                        },
                        "buildingNumber": {
                            "type": "number"
                        }
                    }
                },
                "estateType": {
                    "type": "string"
                },
                "isAvailable": {
                    "type": "boolean"
                },
                "isPetsAllowed": {
                    "type": "boolean"
                },
                "numberOfResidents": {
                    "type": "number"
                },
                "dailyPrice": {
                    "type": "number"
                }
            }
        },
        "City": {
            "required": [
                "name",
                "units"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "required": true
                },
                "cover": {
                    "type": "string"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "type": "objectId"
                    }
                }
            }
        },
        "updateCity": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "prop": {
                        "type": "name|cover|units"
                    },
                    "value": {
                        "type": "new value we want to change"
                    }
                }
            }
        },
        "getCityById": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "cover": {
                    "type": "string"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Unit"
                    }
                }
            }
        },
        "User": {
            "required": [
                "fullName",
                "age",
                "email",
                "gender",
                "password",
                "phone",
                "national_id",
                "balance"
            ],
            "properties": {
                "fullName": {
                    "type": "string"
                },
                "age": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "national_id": {
                    "type": "number"
                },
                "favoriteUnits": {
                    "type": "array",
                    "items": {
                        "type": "objectId"
                    }
                },
                "image": {
                    "type": "string"
                },
                "isAgent": {
                    "type": "boolean"
                },
                "isLandlord": {
                    "type": "boolean"
                },
                "address": {
                    "type": "object",
                    "properties": {
                        "city": {
                            "type": "string"
                        },
                        "streetName": {
                            "type": "number"
                        },
                        "buildingNumber": {
                            "type": "number"
                        }
                    }
                },
                "balance": {
                    "type": "number"
                }
            }
        },
        "UpdateUser": {
            "required": [
                "_id"
            ],
            "properties": {
                "_id": {
                    "type": "objectId"
                },
                "fullName": {
                    "type": "string"
                },
                "age": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                },
                "isAgent": {
                    "type": "boolean"
                },
                "isLandlord": {
                    "type": "boolean"
                },
                "address": {
                    "type": "object",
                    "properties": {
                        "city": {
                            "type": "string"
                        },
                        "streetName": {
                            "type": "number"
                        },
                        "buildingNumber": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "Admin": {
            "required": [
                "fullName",
                "age",
                "email",
                "password",
                "phone",
                "national_id"
            ],
            "properties": {
                "fullName": {
                    "type": "string"
                },
                "age": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "national_id": {
                    "type": "number"
                }
            }
        },
        "UpdateAdmin": {
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "objectId"
                },
                "fullName": {
                    "type": "string"
                },
                "age": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "national_id": {
                    "type": "number"
                }
            }
        },
        "UserSignUp": {
            "required": [
                "firstName",
                "middleName",
                "lastName",
                "age",
                "email",
                "gender",
                "password",
                "confirmPassword",
                "phone",
                "nationalId"
            ],
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "age": {
                    "type": "number"
                },
                "gender": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "confirmPassword": {
                    "type": "string"
                },
                "phone": {
                    "type": "number"
                },
                "national_id": {
                    "type": "number"
                }
            }
        },
        "UserDataAvailability": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "number"
                },
                "national_id": {
                    "type": "number"
                }
            }
        },
        "Agent": {
            "required": [
                "agentUnits",
                "_id"
            ],
            "properties": {
                "_id": {
                    "type": "objectId",
                    "$ref": "#/definitions/User"
                },
                "agentUnits": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "unitId": {
                                "type": "objectId",
                                "$ref": "#/definitions/Unit"
                            },
                            "numberOfRenting": {
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "Landlord": {
            "required": [
                "landlordUnits",
                "_id"
            ],
            "properties": {
                "_id": {
                    "type": "objectId"
                },
                "landlordUnits": {
                    "type": "array",
                    "items": {
                        "type": "objectId"
                    }
                }
            }
        },
        "LandlordUnits": {
            "required": [
                "landlordUnits",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "objectId"
                },
                "landlordUnits": {
                    "type": "array",
                    "items": {
                        "type": "objectId"
                    }
                }
            }
        },
        "AddingNewLandlord": {
            "properties": {
                "_id": {
                    "type": "objectId"
                },
                "landlordUnits": {
                    "type": "array",
                    "items": {
                        "type": "objectId"
                    }
                }
            }
        },
        "AddingNewAgent": {
            "properties": {
                "_id": {
                    "type": "objectId"
                },
                "agentUnits": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "unitId": {
                                "type": "objectId"
                            },
                            "numberOfRenting": {
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "deleteAgentUnits": {
            "properties": {
                "agentUnits": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "unitId": {
                                "type": "objectId"
                            },
                            "numberOfRenting": {
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "HelpQuestion": {
            "required": [
                "userId",
                "adminId",
                "question",
                "answer"
            ],
            "properties": {
                "userId": {
                    "type": "objectId"
                },
                "adminId": {
                    "type": "objectId"
                },
                "question": {
                    "type": "string"
                },
                "answer": {
                    "type": "string"
                }
            }
        },
        "Reviews": {
            "required": [
                "agentId",
                "unitId",
                "comment",
                "rating"
            ],
            "properties": {
                "agentId": {
                    "type": "objectId",
                    "$ref": "#/definitions/Agent"
                },
                "unitId": {
                    "type": "objectId",
                    "$ref": "#/definitions/Unit"
                },
                "comment": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                }
            }
        },
        "addingReview": {
            "required": [
                "agentId",
                "unitId",
                "comment",
                "rating"
            ],
            "properties": {
                "agentId": {
                    "type": "objectId"
                },
                "unitId": {
                    "type": "objectId"
                },
                "comment": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                }
            }
        },
        "Contract": {
            "required": [
                "landlordId",
                "agentId",
                "unitId",
                "rentalStart",
                "rentalEnd",
                "paymentAmount",
                "paymentMethod",
                "totalAmount",
                "offerPercentage"
            ],
            "properties": {
                "landlordId": {
                    "type": "objectId"
                },
                "agentId": {
                    "type": "objectId"
                },
                "unitId": {
                    "type": "objectId"
                },
                "rentalStart": {
                    "type": "Date"
                },
                "rentalEnd": {
                    "type": "Date"
                },
                "paymentAmount": {
                    "type": "number"
                },
                "totalAmount": {
                    "type": "number"
                },
                "paymentMethod": {
                    "type": "string"
                },
                "offerPercentage": {
                    "type": "number"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "canceled",
                        "proposed"
                    ]
                }
            }
        },
        "addingUnitToCity": {
            "properties": {
                "units": {
                    "type": "array",
                    "items": {
                        "type": "objectId"
                    }
                }
            }
        },
        "deleteMany": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "objectId"
                    }
                }
            }
        },
        "updateAgentFavoriteUnits": {
            "properties": {
                "favoriteUnits": {
                    "type": "objectId"
                }
            }
        },
        "bookingUnit": {
            "properties": {
                "id": {
                    "type": "objectId"
                },
                "rentalStart": {
                    "type": "string"
                },
                "rentalEnd": {
                    "type": "string"
                },
                "days": {
                    "type": "number"
                },
                "paymentMethod": {
                    "type": "string",
                    "enum": [
                        "paypal",
                        "bank",
                        "cash"
                    ]
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "canceled",
                        "proposed"
                    ]
                }
            }
        }
    }
}